// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User{
  id String @id @default(auto()) @map("_id") @db.ObjectId
  name String
  image String?
  email String? @unique
  emailVerified DateTime?
  hashedPassword String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  favouriteIds String[] @db.ObjectId
  sessions Session[]
  accounts Account[]
  profiles Profile[]
}




model Account{
  id String @id @default(auto()) @map("_id") @db.ObjectId
  userId String @db.ObjectId
  type String
  provider String
  providerAccountId String
  referesh_token String?  @db.String
  access_token String? @db.String
  expires_at Int?
  token_type String?
  scope String?
  id_token String? @db.String
  session_state String?

user User @relation(fields: [userId],references: [id], onDelete: Cascade)

@@unique([provider,providerAccountId])
}


model Profile {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  name String 
  image String
  userId String @db.ObjectId
  user User @relation(fields: [userId],references: [id], onDelete: Cascade)

  @@unique([image, userId])
  @@unique([name,userId])

  movies Movie[]
}

model Session{
  id String @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String @unique
  userId String @db.ObjectId
  expires DateTime

  user User @relation(fields: [userId], references: [id] , onDelete:Cascade)

}

model VerificationToken{
  id String @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token String @unique
  expires DateTime

  @@unique([identifier,token])
}


model Movie{
  id String @id @default(auto()) @map("_id") @db.ObjectId
  showId Int 
  genres String[]
  overview String
  last_air_date String?
  number_of_episodes Int?
  number_of_seasons Int?
  title String
  backdrop_path String?
  release_date String?
  runtime Int?
  videoKey String
  mediaType String
  profileId String @db.ObjectId
  profile Profile @relation(fields: [profileId],references: [id], onDelete: Cascade)

  @@unique([profileId, showId])
}

